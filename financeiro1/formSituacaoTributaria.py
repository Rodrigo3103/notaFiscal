# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'formSituacaoTributaria.ui'
#
# Created by: PyQt5 UI code generator 5.15.10
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QMessageBox, QApplication, QWidget, QFileDialog, QTableWidget, QTableWidgetItem

# lib conexão MySQL
import mysql.connector

### Import das Variaveis Controle ###
import variaveisDeControles

### Variáveis de conexão com o banco de dados ###
host = variaveisDeControles.host
user = variaveisDeControles.user
password = variaveisDeControles.password
database = variaveisDeControles.database

# Imports libs gerais
from datetime import datetime
import subprocess
import pandas as pd
import funcoesAuxiliares
from decimal import Decimal


class Ui_formSituacaoTributaria(object):
    def setupUi(self, formSituacaoTributaria):
        formSituacaoTributaria.setObjectName("formSituacaoTributaria")
        formSituacaoTributaria.resize(523, 531)
        self.txt_pesquisarPor = QtWidgets.QLabel(formSituacaoTributaria)
        self.txt_pesquisarPor.setGeometry(QtCore.QRect(20, 100, 91, 20))
        self.txt_pesquisarPor.setObjectName("txt_pesquisarPor")
        self.bt_sair = QtWidgets.QToolButton(formSituacaoTributaria)
        self.bt_sair.setGeometry(QtCore.QRect(430, 0, 91, 81))
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.bt_sair.setFont(font)
        self.bt_sair.setFocusPolicy(QtCore.Qt.ClickFocus)
        self.bt_sair.setStyleSheet("")
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap("icons/iconSair.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.bt_sair.setIcon(icon)
        self.bt_sair.setIconSize(QtCore.QSize(80, 80))
        self.bt_sair.setToolButtonStyle(QtCore.Qt.ToolButtonTextUnderIcon)
        self.bt_sair.setObjectName("bt_sair")
        self.bt_incluir = QtWidgets.QToolButton(formSituacaoTributaria)
        self.bt_incluir.setGeometry(QtCore.QRect(0, 0, 91, 81))
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.bt_incluir.setFont(font)
        self.bt_incluir.setFocusPolicy(QtCore.Qt.ClickFocus)
        self.bt_incluir.setStyleSheet("")
        icon1 = QtGui.QIcon()
        icon1.addPixmap(QtGui.QPixmap("icons/iconAdicionar.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.bt_incluir.setIcon(icon1)
        self.bt_incluir.setIconSize(QtCore.QSize(80, 80))
        self.bt_incluir.setToolButtonStyle(QtCore.Qt.ToolButtonTextUnderIcon)
        self.bt_incluir.setObjectName("bt_incluir")
        self.bt_pesquisar = QtWidgets.QPushButton(formSituacaoTributaria)
        self.bt_pesquisar.setGeometry(QtCore.QRect(430, 120, 21, 23))
        self.bt_pesquisar.setStyleSheet("")
        self.bt_pesquisar.setText("")
        icon2 = QtGui.QIcon()
        icon2.addPixmap(QtGui.QPixmap("icons/iconPesquisar.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.bt_pesquisar.setIcon(icon2)
        self.bt_pesquisar.setObjectName("bt_pesquisar")
        self.tb_situacaoTributaria = QtWidgets.QTableWidget(formSituacaoTributaria)
        self.tb_situacaoTributaria.setEnabled(True)
        self.tb_situacaoTributaria.setGeometry(QtCore.QRect(0, 171, 521, 361))
        self.tb_situacaoTributaria.setVerticalScrollBarPolicy(QtCore.Qt.ScrollBarAlwaysOn)
        self.tb_situacaoTributaria.setHorizontalScrollBarPolicy(QtCore.Qt.ScrollBarAlwaysOn)
        self.tb_situacaoTributaria.setAutoScroll(True)
        self.tb_situacaoTributaria.setSelectionBehavior(QtWidgets.QAbstractItemView.SelectRows)
        self.tb_situacaoTributaria.setVerticalScrollMode(QtWidgets.QAbstractItemView.ScrollPerPixel)
        self.tb_situacaoTributaria.setHorizontalScrollMode(QtWidgets.QAbstractItemView.ScrollPerPixel)
        self.tb_situacaoTributaria.setObjectName("tb_situacaoTributaria")
        self.tb_situacaoTributaria.setColumnCount(6)
        self.tb_situacaoTributaria.setRowCount(0)
        item = QtWidgets.QTableWidgetItem()
        item.setText("ID")
        font = QtGui.QFont()
        font.setPointSize(8)
        item.setFont(font)
        self.tb_situacaoTributaria.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.tb_situacaoTributaria.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        self.tb_situacaoTributaria.setHorizontalHeaderItem(2, item)
        item = QtWidgets.QTableWidgetItem()
        self.tb_situacaoTributaria.setHorizontalHeaderItem(3, item)
        item = QtWidgets.QTableWidgetItem()
        self.tb_situacaoTributaria.setHorizontalHeaderItem(4, item)
        item = QtWidgets.QTableWidgetItem()
        self.tb_situacaoTributaria.setHorizontalHeaderItem(5, item)
        self.tb_situacaoTributaria.horizontalHeader().setVisible(True)
        self.tb_situacaoTributaria.verticalHeader().setVisible(False)
        self.lb_pesquisar = QtWidgets.QLineEdit(formSituacaoTributaria)
        self.lb_pesquisar.setGeometry(QtCore.QRect(150, 120, 271, 20))
        self.lb_pesquisar.setObjectName("lb_pesquisar")
        self.bt_pesquisarGeral = QtWidgets.QPushButton(formSituacaoTributaria)
        self.bt_pesquisarGeral.setGeometry(QtCore.QRect(460, 120, 21, 23))
        self.bt_pesquisarGeral.setStyleSheet("")
        self.bt_pesquisarGeral.setText("")
        icon3 = QtGui.QIcon()
        icon3.addPixmap(QtGui.QPixmap("icons/iconFiltro.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.bt_pesquisarGeral.setIcon(icon3)
        self.bt_pesquisarGeral.setObjectName("bt_pesquisarGeral")
        self.bt_alterar = QtWidgets.QToolButton(formSituacaoTributaria)
        self.bt_alterar.setGeometry(QtCore.QRect(90, 0, 91, 81))
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.bt_alterar.setFont(font)
        self.bt_alterar.setFocusPolicy(QtCore.Qt.ClickFocus)
        self.bt_alterar.setStyleSheet("")
        icon4 = QtGui.QIcon()
        icon4.addPixmap(QtGui.QPixmap("icons/iconAlterar.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.bt_alterar.setIcon(icon4)
        self.bt_alterar.setIconSize(QtCore.QSize(80, 80))
        self.bt_alterar.setToolButtonStyle(QtCore.Qt.ToolButtonTextUnderIcon)
        self.bt_alterar.setObjectName("bt_alterar")
        self.bt_consultar = QtWidgets.QToolButton(formSituacaoTributaria)
        self.bt_consultar.setGeometry(QtCore.QRect(180, 0, 91, 81))
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.bt_consultar.setFont(font)
        self.bt_consultar.setFocusPolicy(QtCore.Qt.ClickFocus)
        self.bt_consultar.setStyleSheet("")
        icon5 = QtGui.QIcon()
        icon5.addPixmap(QtGui.QPixmap("icons/iconConsultar.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.bt_consultar.setIcon(icon5)
        self.bt_consultar.setIconSize(QtCore.QSize(80, 80))
        self.bt_consultar.setToolButtonStyle(QtCore.Qt.ToolButtonTextUnderIcon)
        self.bt_consultar.setObjectName("bt_consultar")
        self.bt_excluir = QtWidgets.QToolButton(formSituacaoTributaria)
        self.bt_excluir.setGeometry(QtCore.QRect(270, 0, 91, 81))
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.bt_excluir.setFont(font)
        self.bt_excluir.setFocusPolicy(QtCore.Qt.ClickFocus)
        self.bt_excluir.setStyleSheet("")
        icon6 = QtGui.QIcon()
        icon6.addPixmap(QtGui.QPixmap("icons/iconCancelar.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.bt_excluir.setIcon(icon6)
        self.bt_excluir.setIconSize(QtCore.QSize(80, 80))
        self.bt_excluir.setToolButtonStyle(QtCore.Qt.ToolButtonTextUnderIcon)
        self.bt_excluir.setObjectName("bt_excluir")
        self.txt_digiteAqui = QtWidgets.QLabel(formSituacaoTributaria)
        self.txt_digiteAqui.setGeometry(QtCore.QRect(150, 100, 71, 20))
        self.txt_digiteAqui.setObjectName("txt_digiteAqui")
        self.cb_pesquisarPor = QtWidgets.QComboBox(formSituacaoTributaria)
        self.cb_pesquisarPor.setGeometry(QtCore.QRect(20, 120, 111, 22))
        self.cb_pesquisarPor.setObjectName("cb_pesquisarPor")
        self.cb_pesquisarPor.addItem("")
        self.cb_pesquisarPor.addItem("")
        self.frameDadosSituacaoTributaria = QtWidgets.QFrame(formSituacaoTributaria)
        self.frameDadosSituacaoTributaria.setGeometry(QtCore.QRect(80, 230, 361, 201))
        self.frameDadosSituacaoTributaria.setStyleSheet("background-color: rgb(241, 241, 241);")
        self.frameDadosSituacaoTributaria.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frameDadosSituacaoTributaria.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frameDadosSituacaoTributaria.setObjectName("frameDadosSituacaoTributaria")
        self.gb_dados = QtWidgets.QGroupBox(self.frameDadosSituacaoTributaria)
        self.gb_dados.setGeometry(QtCore.QRect(10, 0, 341, 131))
        self.gb_dados.setObjectName("gb_dados")
        self.txt_descricao = QtWidgets.QLabel(self.gb_dados)
        self.txt_descricao.setGeometry(QtCore.QRect(30, 70, 61, 16))
        self.txt_descricao.setObjectName("txt_descricao")
        self.lb_descricao = QtWidgets.QLineEdit(self.gb_dados)
        self.lb_descricao.setGeometry(QtCore.QRect(30, 90, 291, 20))
        self.lb_descricao.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.lb_descricao.setText("")
        self.lb_descricao.setMaxLength(50)
        self.lb_descricao.setObjectName("lb_descricao")
        self.lb_situacaoTributaria = QtWidgets.QLineEdit(self.gb_dados)
        self.lb_situacaoTributaria.setGeometry(QtCore.QRect(30, 40, 111, 20))
        self.lb_situacaoTributaria.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.lb_situacaoTributaria.setText("")
        self.lb_situacaoTributaria.setMaxLength(3)
        self.lb_situacaoTributaria.setObjectName("lb_situacaoTributaria")
        self.txt_situacaoTributaria = QtWidgets.QLabel(self.gb_dados)
        self.txt_situacaoTributaria.setGeometry(QtCore.QRect(30, 20, 121, 16))
        self.txt_situacaoTributaria.setObjectName("txt_situacaoTributaria")
        self.bt_cancelar = QtWidgets.QToolButton(self.frameDadosSituacaoTributaria)
        self.bt_cancelar.setGeometry(QtCore.QRect(40, 140, 121, 51))
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.bt_cancelar.setFont(font)
        self.bt_cancelar.setFocusPolicy(QtCore.Qt.ClickFocus)
        self.bt_cancelar.setStyleSheet("")
        self.bt_cancelar.setIcon(icon6)
        self.bt_cancelar.setIconSize(QtCore.QSize(48, 48))
        self.bt_cancelar.setToolButtonStyle(QtCore.Qt.ToolButtonTextBesideIcon)
        self.bt_cancelar.setObjectName("bt_cancelar")
        self.bt_alterarCadastro = QtWidgets.QToolButton(self.frameDadosSituacaoTributaria)
        self.bt_alterarCadastro.setGeometry(QtCore.QRect(210, 140, 121, 51))
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.bt_alterarCadastro.setFont(font)
        self.bt_alterarCadastro.setFocusPolicy(QtCore.Qt.ClickFocus)
        self.bt_alterarCadastro.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.bt_alterarCadastro.setStyleSheet("")
        icon7 = QtGui.QIcon()
        icon7.addPixmap(QtGui.QPixmap("icons/iconCancelarNFe.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.bt_alterarCadastro.setIcon(icon7)
        self.bt_alterarCadastro.setIconSize(QtCore.QSize(40, 48))
        self.bt_alterarCadastro.setToolButtonStyle(QtCore.Qt.ToolButtonTextBesideIcon)
        self.bt_alterarCadastro.setObjectName("bt_alterarCadastro")
        self.bt_confirmar = QtWidgets.QToolButton(self.frameDadosSituacaoTributaria)
        self.bt_confirmar.setGeometry(QtCore.QRect(210, 140, 121, 51))
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.bt_confirmar.setFont(font)
        self.bt_confirmar.setFocusPolicy(QtCore.Qt.ClickFocus)
        self.bt_confirmar.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.bt_confirmar.setStyleSheet("")
        icon8 = QtGui.QIcon()
        icon8.addPixmap(QtGui.QPixmap("icons/iconConfirmar.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.bt_confirmar.setIcon(icon8)
        self.bt_confirmar.setIconSize(QtCore.QSize(40, 48))
        self.bt_confirmar.setToolButtonStyle(QtCore.Qt.ToolButtonTextBesideIcon)
        self.bt_confirmar.setObjectName("bt_confirmar")

        self.retranslateUi(formSituacaoTributaria)
        self.bt_incluir.clicked.connect(self.frameDadosSituacaoTributaria.show) # type: ignore
        self.bt_incluir.clicked.connect(self.bt_alterarCadastro.hide) # type: ignore
        self.bt_alterar.clicked.connect(self.frameDadosSituacaoTributaria.show) # type: ignore
        self.bt_alterar.clicked.connect(self.bt_confirmar.hide) # type: ignore
        self.bt_consultar.clicked.connect(self.frameDadosSituacaoTributaria.show) # type: ignore
        self.bt_consultar.clicked.connect(self.bt_alterarCadastro.hide) # type: ignore
        self.bt_consultar.clicked.connect(self.bt_confirmar.hide) # type: ignore
        self.bt_cancelar.clicked.connect(self.frameDadosSituacaoTributaria.hide) # type: ignore
        self.bt_confirmar.clicked.connect(self.frameDadosSituacaoTributaria.hide) # type: ignore
        self.bt_alterarCadastro.clicked.connect(self.frameDadosSituacaoTributaria.hide) # type: ignore
        self.bt_alterar.clicked.connect(self.bt_alterarCadastro.show) # type: ignore
        self.bt_incluir.clicked.connect(self.bt_confirmar.show) # type: ignore
        QtCore.QMetaObject.connectSlotsByName(formSituacaoTributaria)
        formSituacaoTributaria.setTabOrder(self.lb_situacaoTributaria, self.lb_descricao)
        formSituacaoTributaria.setTabOrder(self.lb_descricao, self.cb_pesquisarPor)
        formSituacaoTributaria.setTabOrder(self.cb_pesquisarPor, self.lb_pesquisar)
        formSituacaoTributaria.setTabOrder(self.lb_pesquisar, self.bt_pesquisar)
        formSituacaoTributaria.setTabOrder(self.bt_pesquisar, self.bt_pesquisarGeral)
        formSituacaoTributaria.setTabOrder(self.bt_pesquisarGeral, self.tb_situacaoTributaria)

    def retranslateUi(self, formSituacaoTributaria):
        _translate = QtCore.QCoreApplication.translate
        formSituacaoTributaria.setWindowTitle(_translate("formSituacaoTributaria", "Classificação Fiscal"))
        self.txt_pesquisarPor.setText(_translate("formSituacaoTributaria", "Pesquisar por:"))
        self.bt_sair.setText(_translate("formSituacaoTributaria", "Sair"))
        self.bt_incluir.setText(_translate("formSituacaoTributaria", "Incluir"))
        item = self.tb_situacaoTributaria.horizontalHeaderItem(1)
        item.setText(_translate("formSituacaoTributaria", "CST"))
        item = self.tb_situacaoTributaria.horizontalHeaderItem(2)
        item.setText(_translate("formSituacaoTributaria", "Descrição"))
        item = self.tb_situacaoTributaria.horizontalHeaderItem(3)
        item.setText(_translate("formSituacaoTributaria", "usuario"))
        item = self.tb_situacaoTributaria.horizontalHeaderItem(4)
        item.setText(_translate("formSituacaoTributaria", "Auditoria"))
        item = self.tb_situacaoTributaria.horizontalHeaderItem(5)
        item.setText(_translate("formSituacaoTributaria", "Ativo"))
        self.bt_alterar.setText(_translate("formSituacaoTributaria", "Alterar"))
        self.bt_consultar.setText(_translate("formSituacaoTributaria", "Consultar"))
        self.bt_excluir.setText(_translate("formSituacaoTributaria", "Excluir"))
        self.txt_digiteAqui.setText(_translate("formSituacaoTributaria", "Digite Aqui:"))
        self.cb_pesquisarPor.setItemText(0, _translate("formSituacaoTributaria", "Descrição"))
        self.cb_pesquisarPor.setItemText(1, _translate("formSituacaoTributaria", "CST"))
        self.gb_dados.setTitle(_translate("formSituacaoTributaria", "Dados"))
        self.txt_descricao.setText(_translate("formSituacaoTributaria", "Descrição:"))
        self.txt_situacaoTributaria.setText(_translate("formSituacaoTributaria", "Situação Tributária:"))
        self.bt_cancelar.setText(_translate("formSituacaoTributaria", "Cancelar"))
        self.bt_alterarCadastro.setText(_translate("formSituacaoTributaria", "Alterar"))
        self.bt_confirmar.setText(_translate("formSituacaoTributaria", "Confirmar"))
        
        
        # Esconde funções da tela
        self.frameDadosSituacaoTributaria.hide()

        # Conexões dos botões
        self.bt_confirmar.clicked.connect(self.cadastrarSituacaoTributaria) # Cadastra dados no Banco de Dados
        self.bt_pesquisar.clicked.connect(self.consultar) # Consulta baseado na pesquisa do usuário
        self.bt_pesquisarGeral.clicked.connect(self.consultaGeral) # Consulta geral tabela SituacaoTributaria
        self.bt_excluir.clicked.connect(self.excluirSituacaoTributaria) # Exclui o SituacaoTributaria conforme linha selecionada
        self.bt_alterar.clicked.connect(self.abrirDadosSituacaoTributaria) # Consulta os dados do SituacaoTributaria trazendo nas labels
        self.bt_alterarCadastro.clicked.connect(self.alterarSituacaoTributaria) # Altera dados do SituacaoTributaria
        self.bt_consultar.clicked.connect(self.consultarSituacaoTributaria) # Consulta os dados do SituacaoTributaria
        self.bt_cancelar.clicked.connect(self.cancelarOperacao) # Cancela a operação do usuário
        self.bt_sair.clicked.connect(formSituacaoTributaria.close) # Fecha a tela


    # Funções Sistema
    # Cancela operação do usuário
    def cancelarOperacao(self):
        # Destravar as labels
        self.gb_dados.setEnabled(True)
        # Limpar as labels
        self.lb_situacaoTributaria.clear()
        self.lb_descricao.clear()
    # Consulta os dados do cliente
    def consultarSituacaoTributaria(self):
        #self.lb_razaoSocial.setEnabled(False) # Apenas para terem como referência que pode ser setado por label também
        self.gb_dados.setEnabled(False)
        # Verificar qual cliente o usário quer consultar
        linha = self.tb_situacaoTributaria.currentRow()
        idsituacaoTributariaLinha = self.tb_situacaoTributaria.item(linha, 0).text()
        # Tenta realizar a conexão com o BD e executar a Query
        try:
            mydb = mysql.connector.connect(
                host = host,
                user = user,
                password = password,
                database = database
            )
            mycursor = mydb.cursor()
            consultaUsuario = self.lb_pesquisar.text()
            consultaSQL = "SELECT * FROM situacaotributaria WHERE idsituacaoTributaria = " + idsituacaoTributariaLinha + " ORDER by situacaoTributaria"
            mycursor.execute(consultaSQL)
            myresult = mycursor.fetchall()
            df_situacaoTributaria = pd.DataFrame(myresult, columns = ['idsituacaoTributaria', 'situacaoTributaria', 'descricao', 'usuarioCadastro', 'auditoria', 'ativo'])
            # Seta labels da tela em variáveis
            self.lb_situacaoTributaria.setText(df_situacaoTributaria.loc[0][1])
            self.lb_descricao.setText(df_situacaoTributaria.loc[0][2])
            mycursor.close()
        except:
            self.all_data = 0
            print(consultaSQL)
            msg = QMessageBox()
            msg.setIcon(QMessageBox.Warning)
            msg.setText("Error")
            msg.setInformativeText('Erro ao consultar a situação tributária, favor contactar o administrador do sistema!')
            msg.setWindowTitle("Error")
            msg.exec_()
            pass
    # Confirma a alteração dos dados da SituacaoTributaria no Banco de Dados
    def alterarSituacaoTributaria(self):
        # Verifica qual idsituacaoTributaria está selecionado e altera os dados do cliente
        linha = self.tb_situacaoTributaria.currentRow()
        idsituacaoTributariaLinha = self.tb_situacaoTributaria.item(linha, 0).text()
        # Seta labels da tela em variáveis
        situacaoTributaria = self.lb_situacaoTributaria.text()
        descricao = self.lb_descricao.text()
        usuarioCadastro = 1
        dataHoje = datetime.today().strftime('%Y-%m-%d %H:%M:%S')
        serialUniqPC = subprocess.check_output('wmic bios get serialnumber').decode("utf-8") 
        auditoria = str(dataHoje) + ' ' + str(serialUniqPC[27:49])
        ativo = 'S'
        # Confere se elas foram preenchidas ou não, se não coloca "None"
        if situacaoTributaria == '':
            situacaoTributaria = None
        if descricao == '':
            descricao = None
        # Tenta realizar a conexão com o BD e executar a Query
        try:
            mydb = mysql.connector.connect(
                host = host,
                user = user,
                password = password,
                database = database
            )
            mycursor = mydb.cursor()
            sql = "UPDATE situacaotributaria SET situacaoTributaria = %s, descricao = %s, usuarioCadastro = %s, auditoria = %s, ativo = %s WHERE idsituacaoTributaria = %s"
            val = (situacaoTributaria, descricao, usuarioCadastro, auditoria, ativo, idsituacaoTributariaLinha)
            mycursor.execute(sql, val)
            # Make sure data is committed to the database
            mydb.commit()
            print(mycursor.rowcount, "record(s) affected")
            # Limpar as labels
            self.lb_situacaoTributaria.clear()
            self.lb_descricao.clear()
            # Atualiza a tabela SituacaoTributaria
            mycursor.execute("SELECT * FROM situacaotributaria WHERE ativo = 'S' ORDER by situacaoTributaria")
            myresult = mycursor.fetchall()
            df_situacaoTributaria = pd.DataFrame(myresult, columns = ['idsituacaoTributaria', 'situacaoTributaria', 'descricao', 'usuarioCadastro', 'auditoria', 'ativo'])
            self.all_data = df_situacaoTributaria
            # Carrega o arquivo na tabela tb_situacaoTributaria#
            numRows = len(self.all_data.index)
            self.tb_situacaoTributaria.setColumnCount(len(self.all_data.columns))
            self.tb_situacaoTributaria.setRowCount(numRows)
            self.tb_situacaoTributaria.setHorizontalHeaderLabels(self.all_data.columns)
            for i in range(numRows):
                for j in range(len(self.all_data.columns)):
                    self.tb_situacaoTributaria.setItem(i, j, QTableWidgetItem(str(self.all_data.iat[i,j])))
            self.tb_situacaoTributaria.resizeColumnsToContents()
            self.tb_situacaoTributaria.resizeRowsToContents()
            # Mensagem de alteração de dados realizada
            msg = QMessageBox()
            msg.setIcon(QMessageBox.Information)
            msg.setText("Aviso")
            aviso = mycursor.rowcount, "Situação Tributária alterada"
            msg.setInformativeText(str(aviso))
            msg.setWindowTitle("Informação")
            msg.exec_()
        except:
            print(sql)
            print(val)
            print('Erro na alteração dos dados')
            msg = QMessageBox()
            msg.setIcon(QMessageBox.Critical)
            msg.setText("Erro SQL")
            msg.setInformativeText('Favor contactar o administrador do sistema!')
            msg.setWindowTitle("Erro")
            msg.exec_()
    # Carrega dados da SituacaoTributaria nas labels
    def abrirDadosSituacaoTributaria(self):
        linha = self.tb_situacaoTributaria.currentRow()
        idsituacaoTributariaLinha = self.tb_situacaoTributaria.item(linha, 0).text()
        # Tenta realizar a conexão com o BD e executar a Query
        try:
            mydb = mysql.connector.connect(
                host = host,
                user = user,
                password = password,
                database = database
            )
            mycursor = mydb.cursor()
            consultaSQL = "SELECT * FROM situacaotributaria WHERE idsituacaoTributaria = " + idsituacaoTributariaLinha
            mycursor.execute(consultaSQL)
            myresult = mycursor.fetchall()
            df_situacaoTributaria = pd.DataFrame(myresult, columns = ['idsituacaoTributaria', 'situacaoTributaria', 'descricao', 'usuarioCadastro', 'auditoria', 'ativo'])
            # Seta labels da tela em variáveis
            self.lb_situacaoTributaria.setText(df_situacaoTributaria.loc[0][1])
            self.lb_descricao.setText(df_situacaoTributaria.loc[0][2])
        except:
            self.all_data = 0
            print(consultaSQL)
            msg = QMessageBox()
            msg.setIcon(QMessageBox.Warning)
            msg.setText("Error")
            msg.setInformativeText('Favor contactar o administrador do sistema!')
            msg.setWindowTitle("Error")
            msg.exec_()
            pass
    # Cadastrar dados na tabela Cliente
    def cadastrarSituacaoTributaria(self):
        # Seta labels da tela em variáveis
        situacaoTributaria = self.lb_situacaoTributaria.text()
        descricao = self.lb_descricao.text()
        usuarioCadastro = 1
        dataHoje = datetime.today().strftime('%Y-%m-%d %H:%M:%S')
        serialUniqPC = subprocess.check_output('wmic bios get serialnumber').decode("utf-8") 
        auditoria = str(dataHoje) + ' ' + str(serialUniqPC[27:49])
        ativo = 'S'
        # Confere se elas foram preenchidas ou não, se não coloca "None"
        if situacaoTributaria == '':
            situacaoTributaria = None
        if descricao == '':
            descricao = None
        # Tenta realizar a conexão com o BD e executar a Query
        try:
            mydb = mysql.connector.connect(
                host = host,
                user = user,
                password = password,
                database = database
            )
            mycursor = mydb.cursor()
            sql = "INSERT INTO situacaotributaria (situacaoTributaria, descricao, usuarioCadastro, auditoria, ativo) VALUES (%s, %s, %s, %s, %s)"
            val = (situacaoTributaria, descricao, usuarioCadastro, auditoria, ativo)
            mycursor.execute(sql, val)
            # Make sure data is committed to the database
            mydb.commit()
            # Limpa as labels da tela
            self.lb_situacaoTributaria.clear()
            self.lb_descricao.clear()
            # Atualiza a tabela SituacaoTributaria
            mycursor.execute("SELECT * FROM situacaotributaria WHERE ativo = 'S' ORDER by situacaoTributaria")
            myresult = mycursor.fetchall()
            df_situacaoTributaria = pd.DataFrame(myresult, columns = ['idsituacaoTributaria', 'situacaoTributaria', 'descricao', 'usuarioCadastro', 'auditoria', 'ativo'])
            self.all_data = df_situacaoTributaria
            # Carrega o arquivo na tabela tb_situacaoTributaria#
            numRows = len(self.all_data.index)
            self.tb_situacaoTributaria.setColumnCount(len(self.all_data.columns))
            self.tb_situacaoTributaria.setRowCount(numRows)
            self.tb_situacaoTributaria.setHorizontalHeaderLabels(self.all_data.columns)
            for i in range(numRows):
                for j in range(len(self.all_data.columns)):
                    self.tb_situacaoTributaria.setItem(i, j, QTableWidgetItem(str(self.all_data.iat[i,j])))
            self.tb_situacaoTributaria.resizeColumnsToContents()
            self.tb_situacaoTributaria.resizeRowsToContents()
            # Mensagem de Inclusão de dados realizada
            msg = QMessageBox()
            msg.setIcon(QMessageBox.Information)
            msg.setText("Aviso")
            msg.setInformativeText('Dados incluídos no sistema!')
            msg.setWindowTitle("Informação")
            msg.exec_()
        except:
            print('Erro na inclusão dos dados')
            msg = QMessageBox()
            msg.setIcon(QMessageBox.Critical)
            msg.setText("Erro SQL")
            msg.setInformativeText('Favor contactar o administrador do sistema!')
            msg.setWindowTitle("Erro")
            msg.exec_()
            # disconnecting from DB
            mycursor.close()
            mydb.close()
    # Consulta baseado na pesquisa do usuário na tabea cliente do BD
    def consultar(self):
        # Tenta realizar a conexão com o BD e executar a Query
        try:
            mydb = mysql.connector.connect(
                host = host,
                user = user,
                password = password,
                database = database
            )
            mycursor = mydb.cursor()
            consultaUsuario = self.lb_pesquisar.text()
            consultaSQL = "SELECT * FROM situacaotributaria WHERE codigo LIKE '" + consultaUsuario + "%' AND ativo = 'S' ORDER by situacaoTributaria"
            print(consultaSQL)
            mycursor.execute(consultaSQL)
            myresult = mycursor.fetchall()
            df_situacaoTributaria = pd.DataFrame(myresult, columns = ['idsituacaoTributaria', 'situacaoTributaria', 'descricao', 'usuarioCadastro', 'auditoria', 'ativo'])
            self.all_data = df_situacaoTributaria
            # Carrega o arquivo na tabela tb_situacaoTributaria#
            numRows = len(self.all_data.index)
            self.tb_situacaoTributaria.setColumnCount(len(self.all_data.columns))
            self.tb_situacaoTributaria.setRowCount(numRows)
            self.tb_situacaoTributaria.setHorizontalHeaderLabels(self.all_data.columns)
            for i in range(numRows):
                for j in range(len(self.all_data.columns)):
                    self.tb_situacaoTributaria.setItem(i, j, QTableWidgetItem(str(self.all_data.iat[i,j])))
            self.tb_situacaoTributaria.resizeColumnsToContents()
            self.tb_situacaoTributaria.resizeRowsToContents()
            mycursor.close()
        except:
            self.all_data = 0
            msg = QMessageBox()
            msg.setIcon(QMessageBox.Warning)
            msg.setText("Error")
            msg.setInformativeText('Favor contactar o administrador do sistema!')
            msg.setWindowTitle("Error")
            msg.exec_()
            pass
    # Exclui do cliente conforme linha selecionada
    def excluirSituacaoTributaria(self):
        reply = QMessageBox()
        reply.setIcon(QMessageBox.Critical)
        reply.setWindowTitle("Aviso")
        reply.setText("Deseja realmente excluir os dados?")
        reply.setStandardButtons(QMessageBox.StandardButton.Yes | QMessageBox.StandardButton.No)
        ret = reply.exec()
        if ret == QMessageBox.StandardButton.Yes:
            linha = self.tb_situacaoTributaria.currentRow()
            idsituacaoTributariaLinha = self.tb_situacaoTributaria.item(linha, 0).text()
            # Tenta realizar a conexão com o BD e executar a Query
            try:
                mydb = mysql.connector.connect(
                    host = host,
                    user = user,
                    password = password,
                    database = database
                )
                mycursor = mydb.cursor()
                sql = "UPDATE situacaotributaria SET ativo = %s WHERE idsituacaoTributaria = %s"
                val = ('N', idsituacaoTributariaLinha)
                mycursor.execute(sql, val)
                # Make sure data is committed to the database
                mydb.commit()
                print(mycursor.rowcount, "record(s) affected")
                # Atualiza a tabela SituacaoTributaria
                mycursor.execute("SELECT * FROM situacaotributaria WHERE ativo = 'S' ORDER by situacaoTributaria")
                myresult = mycursor.fetchall()
                df_situacaoTributaria = pd.DataFrame(myresult, columns = ['idsituacaoTributaria', 'situacaoTributaria', 'descricao', 'usuarioCadastro', 'auditoria', 'ativo'])
                self.all_data = df_situacaoTributaria
                # Carrega o arquivo na tabela tb_situacaoTributaria#
                numRows = len(self.all_data.index)
                self.tb_situacaoTributaria.setColumnCount(len(self.all_data.columns))
                self.tb_situacaoTributaria.setRowCount(numRows)
                self.tb_situacaoTributaria.setHorizontalHeaderLabels(self.all_data.columns)
                for i in range(numRows):
                    for j in range(len(self.all_data.columns)):
                        self.tb_situacaoTributaria.setItem(i, j, QTableWidgetItem(str(self.all_data.iat[i,j])))
                self.tb_situacaoTributaria.resizeColumnsToContents()
                self.tb_situacaoTributaria.resizeRowsToContents()
            except:
                print(sql)
                print(val)
                print('Erro na exclusão dos dados')
                msg = QMessageBox()
                msg.setIcon(QMessageBox.Critical)
                msg.setText("Erro SQL")
                msg.setInformativeText('Favor contactar o administrador do sistema!')
                msg.setWindowTitle("Erro")
                msg.exec_()
                # disconnecting from DB
                mycursor.close()
                mydb.close()
    # Consulta Geral a tabela SituacaoTributaria do BD
    def consultaGeral(self):
        # Tenta realizar a conexão com o BD e executar a Query
        try:
            mydb = mysql.connector.connect(
                host = host,
                user = user,
                password = password,
                database = database
            )
            mycursor = mydb.cursor()
            mycursor.execute("SELECT * FROM situacaotributaria WHERE ativo = 'S' ORDER by situacaoTributaria")
            myresult = mycursor.fetchall()
            df_situacaoTributaria = pd.DataFrame(myresult, columns = ['idsituacaoTributaria', 'situacaoTributaria', 'descricao', 'usuarioCadastro', 'auditoria', 'ativo'])
            self.all_data = df_situacaoTributaria
            # Carrega o arquivo na tabela tb_situacaoTributaria#
            numRows = len(self.all_data.index)
            self.tb_situacaoTributaria.setColumnCount(len(self.all_data.columns))
            self.tb_situacaoTributaria.setRowCount(numRows)
            self.tb_situacaoTributaria.setHorizontalHeaderLabels(self.all_data.columns)
            for i in range(numRows):
                for j in range(len(self.all_data.columns)):
                    self.tb_situacaoTributaria.setItem(i, j, QTableWidgetItem(str(self.all_data.iat[i,j])))
            self.tb_situacaoTributaria.resizeColumnsToContents()
            self.tb_situacaoTributaria.resizeRowsToContents()
            mycursor.close()
        except:
            self.all_data = 0
            msg = QMessageBox()
            msg.setIcon(QMessageBox.Warning)
            msg.setText("Error")
            msg.setInformativeText('Favor contactar o administrador do sistema!')
            msg.setWindowTitle("Error")
            msg.exec_()
            pass


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    formSituacaoTributaria = QtWidgets.QWidget()
    ui = Ui_formSituacaoTributaria()
    ui.setupUi(formSituacaoTributaria)
    formSituacaoTributaria.show()
    sys.exit(app.exec_())
