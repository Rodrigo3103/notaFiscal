# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'formtransportador.ui'
#
# Created by: PyQt5 UI code generator 5.15.10
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QMessageBox, QTableWidgetItem

#Todo: ferramentos externas

import mysql.connector
import pandas as pd
from datetime import datetime
import subprocess




#Todo: importações de telas
import variaveisDeControles

###Todo: variaveis com a conexão do banco de dados.

host = variaveisDeControles.host
user = variaveisDeControles.user
password = variaveisDeControles.password
database = variaveisDeControles.database


class Ui_formtransportador(object):
    def setupUi(self, formtransportador):
        formtransportador.setObjectName("formtransportador")
        formtransportador.resize(813, 703)
        self.txt_nometransportador = QtWidgets.QLabel(formtransportador)
        self.txt_nometransportador.setGeometry(QtCore.QRect(60, 100, 111, 20))
        self.txt_nometransportador.setObjectName("txt_nometransportador")
        self.bt_sair = QtWidgets.QToolButton(formtransportador)
        self.bt_sair.setGeometry(QtCore.QRect(720, 0, 91, 81))
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.bt_sair.setFont(font)
        self.bt_sair.setFocusPolicy(QtCore.Qt.NoFocus)
        self.bt_sair.setStyleSheet("")
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap("icons/iconSair.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.bt_sair.setIcon(icon)
        self.bt_sair.setIconSize(QtCore.QSize(80, 80))
        self.bt_sair.setToolButtonStyle(QtCore.Qt.ToolButtonTextUnderIcon)
        self.bt_sair.setObjectName("bt_sair")
        self.bt_incluir = QtWidgets.QToolButton(formtransportador)
        self.bt_incluir.setGeometry(QtCore.QRect(0, 0, 91, 81))
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.bt_incluir.setFont(font)
        self.bt_incluir.setFocusPolicy(QtCore.Qt.NoFocus)
        self.bt_incluir.setStyleSheet("")
        icon1 = QtGui.QIcon()
        icon1.addPixmap(QtGui.QPixmap("icons/iconAdicionar.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.bt_incluir.setIcon(icon1)
        self.bt_incluir.setIconSize(QtCore.QSize(80, 80))
        self.bt_incluir.setToolButtonStyle(QtCore.Qt.ToolButtonTextUnderIcon)
        self.bt_incluir.setObjectName("bt_incluir")
        self.bt_pesquisar = QtWidgets.QPushButton(formtransportador)
        self.bt_pesquisar.setGeometry(QtCore.QRect(640, 100, 21, 23))
        self.bt_pesquisar.setFocusPolicy(QtCore.Qt.NoFocus)
        self.bt_pesquisar.setStyleSheet("")
        self.bt_pesquisar.setText("")
        icon2 = QtGui.QIcon()
        icon2.addPixmap(QtGui.QPixmap("icons/iconPesquisar.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.bt_pesquisar.setIcon(icon2)
        self.bt_pesquisar.setObjectName("bt_pesquisar")
        self.tb_transportador = QtWidgets.QTableWidget(formtransportador)
        self.tb_transportador.setEnabled(True)
        self.tb_transportador.setGeometry(QtCore.QRect(0, 151, 811, 551))
        self.tb_transportador.setFocusPolicy(QtCore.Qt.NoFocus)
        self.tb_transportador.setVerticalScrollBarPolicy(QtCore.Qt.ScrollBarAsNeeded)
        self.tb_transportador.setHorizontalScrollBarPolicy(QtCore.Qt.ScrollBarAsNeeded)
        self.tb_transportador.setAutoScroll(True)
        self.tb_transportador.setSelectionBehavior(QtWidgets.QAbstractItemView.SelectRows)
        self.tb_transportador.setTextElideMode(QtCore.Qt.ElideRight)
        self.tb_transportador.setVerticalScrollMode(QtWidgets.QAbstractItemView.ScrollPerPixel)
        self.tb_transportador.setHorizontalScrollMode(QtWidgets.QAbstractItemView.ScrollPerPixel)
        self.tb_transportador.setObjectName("tb_transportador")
        self.tb_transportador.setColumnCount(18)
        self.tb_transportador.setRowCount(0)
        item = QtWidgets.QTableWidgetItem()
        item.setText("ID")
        font = QtGui.QFont()
        font.setPointSize(8)
        item.setFont(font)
        self.tb_transportador.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.tb_transportador.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        self.tb_transportador.setHorizontalHeaderItem(2, item)
        item = QtWidgets.QTableWidgetItem()
        self.tb_transportador.setHorizontalHeaderItem(3, item)
        item = QtWidgets.QTableWidgetItem()
        self.tb_transportador.setHorizontalHeaderItem(4, item)
        item = QtWidgets.QTableWidgetItem()
        self.tb_transportador.setHorizontalHeaderItem(5, item)
        item = QtWidgets.QTableWidgetItem()
        self.tb_transportador.setHorizontalHeaderItem(6, item)
        item = QtWidgets.QTableWidgetItem()
        self.tb_transportador.setHorizontalHeaderItem(7, item)
        item = QtWidgets.QTableWidgetItem()
        self.tb_transportador.setHorizontalHeaderItem(8, item)
        item = QtWidgets.QTableWidgetItem()
        self.tb_transportador.setHorizontalHeaderItem(9, item)
        item = QtWidgets.QTableWidgetItem()
        self.tb_transportador.setHorizontalHeaderItem(10, item)
        item = QtWidgets.QTableWidgetItem()
        self.tb_transportador.setHorizontalHeaderItem(11, item)
        item = QtWidgets.QTableWidgetItem()
        self.tb_transportador.setHorizontalHeaderItem(12, item)
        item = QtWidgets.QTableWidgetItem()
        self.tb_transportador.setHorizontalHeaderItem(13, item)
        item = QtWidgets.QTableWidgetItem()
        self.tb_transportador.setHorizontalHeaderItem(14, item)
        item = QtWidgets.QTableWidgetItem()
        self.tb_transportador.setHorizontalHeaderItem(15, item)
        item = QtWidgets.QTableWidgetItem()
        self.tb_transportador.setHorizontalHeaderItem(16, item)
        item = QtWidgets.QTableWidgetItem()
        self.tb_transportador.setHorizontalHeaderItem(17, item)
        self.tb_transportador.horizontalHeader().setVisible(True)
        self.tb_transportador.verticalHeader().setVisible(False)
        self.lb_nometransportador = QtWidgets.QLineEdit(formtransportador)
        self.lb_nometransportador.setGeometry(QtCore.QRect(160, 100, 461, 20))
        self.lb_nometransportador.setFocusPolicy(QtCore.Qt.ClickFocus)
        self.lb_nometransportador.setObjectName("lb_nometransportador")
        self.bt_pesquisarGeral = QtWidgets.QPushButton(formtransportador)
        self.bt_pesquisarGeral.setGeometry(QtCore.QRect(670, 100, 21, 23))
        self.bt_pesquisarGeral.setFocusPolicy(QtCore.Qt.NoFocus)
        self.bt_pesquisarGeral.setStyleSheet("")
        self.bt_pesquisarGeral.setText("")
        icon3 = QtGui.QIcon()
        icon3.addPixmap(QtGui.QPixmap("icons/iconFiltro.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.bt_pesquisarGeral.setIcon(icon3)
        self.bt_pesquisarGeral.setObjectName("bt_pesquisarGeral")
        self.bt_alterar = QtWidgets.QToolButton(formtransportador)
        self.bt_alterar.setGeometry(QtCore.QRect(90, 0, 91, 81))
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.bt_alterar.setFont(font)
        self.bt_alterar.setFocusPolicy(QtCore.Qt.NoFocus)
        self.bt_alterar.setStyleSheet("")
        icon4 = QtGui.QIcon()
        icon4.addPixmap(QtGui.QPixmap("icons/iconAlterar.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.bt_alterar.setIcon(icon4)
        self.bt_alterar.setIconSize(QtCore.QSize(80, 80))
        self.bt_alterar.setToolButtonStyle(QtCore.Qt.ToolButtonTextUnderIcon)
        self.bt_alterar.setObjectName("bt_alterar")
        self.bt_consultar = QtWidgets.QToolButton(formtransportador)
        self.bt_consultar.setGeometry(QtCore.QRect(180, 0, 91, 81))
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.bt_consultar.setFont(font)
        self.bt_consultar.setFocusPolicy(QtCore.Qt.NoFocus)
        self.bt_consultar.setStyleSheet("")
        icon5 = QtGui.QIcon()
        icon5.addPixmap(QtGui.QPixmap("icons/iconConsultar.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.bt_consultar.setIcon(icon5)
        self.bt_consultar.setIconSize(QtCore.QSize(80, 80))
        self.bt_consultar.setToolButtonStyle(QtCore.Qt.ToolButtonTextUnderIcon)
        self.bt_consultar.setObjectName("bt_consultar")
        self.bt_excluir = QtWidgets.QToolButton(formtransportador)
        self.bt_excluir.setGeometry(QtCore.QRect(270, 0, 91, 81))
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.bt_excluir.setFont(font)
        self.bt_excluir.setFocusPolicy(QtCore.Qt.NoFocus)
        self.bt_excluir.setStyleSheet("")
        icon6 = QtGui.QIcon()
        icon6.addPixmap(QtGui.QPixmap("icons/iconCancelar.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.bt_excluir.setIcon(icon6)
        self.bt_excluir.setIconSize(QtCore.QSize(80, 80))
        self.bt_excluir.setToolButtonStyle(QtCore.Qt.ToolButtonTextUnderIcon)
        self.bt_excluir.setObjectName("bt_excluir")
        self.frameDadostransportador = QtWidgets.QFrame(formtransportador)
        self.frameDadostransportador.setGeometry(QtCore.QRect(130, 180, 541, 461))
        self.frameDadostransportador.setStyleSheet("background-color: rgb(241, 241, 241);")
        self.frameDadostransportador.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frameDadostransportador.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frameDadostransportador.setObjectName("frameDadostransportador")
        self.tabWidget = QtWidgets.QTabWidget(self.frameDadostransportador)
        self.tabWidget.setEnabled(True)
        self.tabWidget.setGeometry(QtCore.QRect(0, 0, 541, 461))
        self.tabWidget.setFocusPolicy(QtCore.Qt.NoFocus)
        self.tabWidget.setObjectName("tabWidget")
        self.tab_transportador = QtWidgets.QWidget()
        self.tab_transportador.setObjectName("tab_transportador")
        self.bt_cancelar = QtWidgets.QToolButton(self.tab_transportador)
        self.bt_cancelar.setGeometry(QtCore.QRect(110, 380, 121, 51))
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.bt_cancelar.setFont(font)
        self.bt_cancelar.setFocusPolicy(QtCore.Qt.NoFocus)
        self.bt_cancelar.setStyleSheet("")
        self.bt_cancelar.setIcon(icon6)
        self.bt_cancelar.setIconSize(QtCore.QSize(48, 48))
        self.bt_cancelar.setToolButtonStyle(QtCore.Qt.ToolButtonTextBesideIcon)
        self.bt_cancelar.setObjectName("bt_cancelar")
        self.bt_avancar = QtWidgets.QToolButton(self.tab_transportador)
        self.bt_avancar.setGeometry(QtCore.QRect(320, 380, 121, 51))
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.bt_avancar.setFont(font)
        self.bt_avancar.setFocusPolicy(QtCore.Qt.NoFocus)
        self.bt_avancar.setLayoutDirection(QtCore.Qt.RightToLeft)
        self.bt_avancar.setStyleSheet("")
        icon7 = QtGui.QIcon()
        icon7.addPixmap(QtGui.QPixmap("icons/iconSetaDireita.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.bt_avancar.setIcon(icon7)
        self.bt_avancar.setIconSize(QtCore.QSize(48, 48))
        self.bt_avancar.setToolButtonStyle(QtCore.Qt.ToolButtonTextBesideIcon)
        self.bt_avancar.setObjectName("bt_avancar")
        self.frameTab1 = QtWidgets.QFrame(self.tab_transportador)
        self.frameTab1.setGeometry(QtCore.QRect(10, 10, 521, 361))
        self.frameTab1.setStyleSheet("background-color: rgb(235, 235, 235);")
        self.frameTab1.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frameTab1.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frameTab1.setObjectName("frameTab1")
        self.txt_email = QtWidgets.QLabel(self.frameTab1)
        self.txt_email.setGeometry(QtCore.QRect(10, 310, 61, 16))
        self.txt_email.setObjectName("txt_email")
        self.txt_cep = QtWidgets.QLabel(self.frameTab1)
        self.txt_cep.setGeometry(QtCore.QRect(10, 260, 51, 16))
        self.txt_cep.setObjectName("txt_cep")
        self.txt_telefones = QtWidgets.QLabel(self.frameTab1)
        self.txt_telefones.setGeometry(QtCore.QRect(190, 260, 61, 16))
        self.txt_telefones.setObjectName("txt_telefones")
        self.lb_ierg = QtWidgets.QLineEdit(self.frameTab1)
        self.lb_ierg.setGeometry(QtCore.QRect(280, 130, 231, 20))
        self.lb_ierg.setFocusPolicy(QtCore.Qt.WheelFocus)
        self.lb_ierg.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.lb_ierg.setObjectName("lb_ierg")
        self.lb_email = QtWidgets.QLineEdit(self.frameTab1)
        self.lb_email.setGeometry(QtCore.QRect(10, 330, 501, 20))
        self.lb_email.setFocusPolicy(QtCore.Qt.WheelFocus)
        self.lb_email.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.lb_email.setObjectName("lb_email")
        self.lb_class = QtWidgets.QLineEdit(self.frameTab1)
        self.lb_class.setGeometry(QtCore.QRect(460, 30, 51, 20))
        self.lb_class.setFocusPolicy(QtCore.Qt.WheelFocus)
        self.lb_class.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.lb_class.setObjectName("lb_class")
        self.txt_razaoSocial = QtWidgets.QLabel(self.frameTab1)
        self.txt_razaoSocial.setGeometry(QtCore.QRect(10, 10, 81, 16))
        self.txt_razaoSocial.setObjectName("txt_razaoSocial")
        self.lb_cidade = QtWidgets.QLineEdit(self.frameTab1)
        self.lb_cidade.setGeometry(QtCore.QRect(280, 230, 231, 20))
        self.lb_cidade.setFocusPolicy(QtCore.Qt.WheelFocus)
        self.lb_cidade.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.lb_cidade.setText("")
        self.lb_cidade.setObjectName("lb_cidade")
        self.lb_uf = QtWidgets.QLineEdit(self.frameTab1)
        self.lb_uf.setGeometry(QtCore.QRect(120, 280, 51, 20))
        self.lb_uf.setFocusPolicy(QtCore.Qt.WheelFocus)
        self.lb_uf.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.lb_uf.setObjectName("lb_uf")
        self.txt_IERG = QtWidgets.QLabel(self.frameTab1)
        self.txt_IERG.setGeometry(QtCore.QRect(280, 110, 61, 16))
        self.txt_IERG.setObjectName("txt_IERG")
        self.txt_cidade = QtWidgets.QLabel(self.frameTab1)
        self.txt_cidade.setGeometry(QtCore.QRect(280, 210, 61, 16))
        self.txt_cidade.setObjectName("txt_cidade")
        self.lb_razaoSocial = QtWidgets.QLineEdit(self.frameTab1)
        self.lb_razaoSocial.setGeometry(QtCore.QRect(10, 30, 431, 20))
        self.lb_razaoSocial.setFocusPolicy(QtCore.Qt.WheelFocus)
        self.lb_razaoSocial.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.lb_razaoSocial.setText("")
        self.lb_razaoSocial.setCursorMoveStyle(QtCore.Qt.VisualMoveStyle)
        self.lb_razaoSocial.setObjectName("lb_razaoSocial")
        self.txt_numero = QtWidgets.QLabel(self.frameTab1)
        self.txt_numero.setGeometry(QtCore.QRect(460, 160, 51, 16))
        self.txt_numero.setObjectName("txt_numero")
        self.txt_endereco = QtWidgets.QLabel(self.frameTab1)
        self.txt_endereco.setGeometry(QtCore.QRect(10, 160, 61, 16))
        self.txt_endereco.setObjectName("txt_endereco")
        self.txt_CNPJCPF = QtWidgets.QLabel(self.frameTab1)
        self.txt_CNPJCPF.setGeometry(QtCore.QRect(10, 110, 61, 16))
        self.txt_CNPJCPF.setObjectName("txt_CNPJCPF")
        self.txt_class = QtWidgets.QLabel(self.frameTab1)
        self.txt_class.setGeometry(QtCore.QRect(460, 10, 41, 16))
        self.txt_class.setObjectName("txt_class")
        self.txt_bairro = QtWidgets.QLabel(self.frameTab1)
        self.txt_bairro.setGeometry(QtCore.QRect(10, 210, 61, 16))
        self.txt_bairro.setObjectName("txt_bairro")
        self.txt_nomeFantasia = QtWidgets.QLabel(self.frameTab1)
        self.txt_nomeFantasia.setGeometry(QtCore.QRect(10, 60, 121, 16))
        self.txt_nomeFantasia.setObjectName("txt_nomeFantasia")
        self.lb_cnpjcpf = QtWidgets.QLineEdit(self.frameTab1)
        self.lb_cnpjcpf.setGeometry(QtCore.QRect(10, 130, 251, 20))
        self.lb_cnpjcpf.setFocusPolicy(QtCore.Qt.WheelFocus)
        self.lb_cnpjcpf.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.lb_cnpjcpf.setObjectName("lb_cnpjcpf")
        self.txt_UF = QtWidgets.QLabel(self.frameTab1)
        self.txt_UF.setGeometry(QtCore.QRect(120, 260, 41, 16))
        self.txt_UF.setObjectName("txt_UF")
        self.lb_telefone = QtWidgets.QLineEdit(self.frameTab1)
        self.lb_telefone.setGeometry(QtCore.QRect(190, 280, 321, 20))
        self.lb_telefone.setFocusPolicy(QtCore.Qt.WheelFocus)
        self.lb_telefone.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.lb_telefone.setText("")
        self.lb_telefone.setObjectName("lb_telefone")
        self.lb_endereco = QtWidgets.QLineEdit(self.frameTab1)
        self.lb_endereco.setGeometry(QtCore.QRect(10, 180, 431, 20))
        self.lb_endereco.setFocusPolicy(QtCore.Qt.WheelFocus)
        self.lb_endereco.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.lb_endereco.setObjectName("lb_endereco")
        self.lb_numero = QtWidgets.QLineEdit(self.frameTab1)
        self.lb_numero.setGeometry(QtCore.QRect(460, 180, 51, 20))
        self.lb_numero.setFocusPolicy(QtCore.Qt.WheelFocus)
        self.lb_numero.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.lb_numero.setObjectName("lb_numero")
        self.lb_cep = QtWidgets.QLineEdit(self.frameTab1)
        self.lb_cep.setGeometry(QtCore.QRect(10, 280, 91, 20))
        self.lb_cep.setFocusPolicy(QtCore.Qt.WheelFocus)
        self.lb_cep.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.lb_cep.setText("")
        self.lb_cep.setObjectName("lb_cep")
        self.lb_bairro = QtWidgets.QLineEdit(self.frameTab1)
        self.lb_bairro.setGeometry(QtCore.QRect(10, 230, 251, 20))
        self.lb_bairro.setFocusPolicy(QtCore.Qt.WheelFocus)
        self.lb_bairro.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.lb_bairro.setObjectName("lb_bairro")
        self.lb_nomeFantasia = QtWidgets.QLineEdit(self.frameTab1)
        self.lb_nomeFantasia.setGeometry(QtCore.QRect(10, 80, 501, 20))
        self.lb_nomeFantasia.setFocusPolicy(QtCore.Qt.WheelFocus)
        self.lb_nomeFantasia.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.lb_nomeFantasia.setObjectName("lb_nomeFantasia")
        self.tabWidget.addTab(self.tab_transportador, "")
        self.tab_dadosAdicionais = QtWidgets.QWidget()
        self.tab_dadosAdicionais.setObjectName("tab_dadosAdicionais")
        self.bt_confirmar = QtWidgets.QToolButton(self.tab_dadosAdicionais)
        self.bt_confirmar.setGeometry(QtCore.QRect(320, 380, 121, 51))
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.bt_confirmar.setFont(font)
        self.bt_confirmar.setFocusPolicy(QtCore.Qt.NoFocus)
        self.bt_confirmar.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.bt_confirmar.setStyleSheet("")
        icon8 = QtGui.QIcon()
        icon8.addPixmap(QtGui.QPixmap("icons/iconConfirmar.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.bt_confirmar.setIcon(icon8)
        self.bt_confirmar.setIconSize(QtCore.QSize(40, 48))
        self.bt_confirmar.setToolButtonStyle(QtCore.Qt.ToolButtonTextBesideIcon)
        self.bt_confirmar.setObjectName("bt_confirmar")
        self.bt_retornar = QtWidgets.QToolButton(self.tab_dadosAdicionais)
        self.bt_retornar.setGeometry(QtCore.QRect(110, 380, 121, 51))
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.bt_retornar.setFont(font)
        self.bt_retornar.setFocusPolicy(QtCore.Qt.NoFocus)
        self.bt_retornar.setStyleSheet("")
        icon9 = QtGui.QIcon()
        icon9.addPixmap(QtGui.QPixmap("icons/iconSetaEsquerda.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.bt_retornar.setIcon(icon9)
        self.bt_retornar.setIconSize(QtCore.QSize(48, 48))
        self.bt_retornar.setToolButtonStyle(QtCore.Qt.ToolButtonTextBesideIcon)
        self.bt_retornar.setObjectName("bt_retornar")
        self.frameTab2 = QtWidgets.QFrame(self.tab_dadosAdicionais)
        self.frameTab2.setGeometry(QtCore.QRect(10, 10, 521, 351))
        self.frameTab2.setStyleSheet("background-color: rgb(235, 235, 235);")
        self.frameTab2.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frameTab2.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frameTab2.setObjectName("frameTab2")
        self.lb_prazo = QtWidgets.QLineEdit(self.frameTab2)
        self.lb_prazo.setGeometry(QtCore.QRect(10, 320, 291, 20))
        self.lb_prazo.setFocusPolicy(QtCore.Qt.WheelFocus)
        self.lb_prazo.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.lb_prazo.setInputMask("")
        self.lb_prazo.setMaxLength(15)
        self.lb_prazo.setFrame(True)
        self.lb_prazo.setObjectName("lb_prazo")
        self.txt_CNPJCPF_2 = QtWidgets.QLabel(self.frameTab2)
        self.txt_CNPJCPF_2.setGeometry(QtCore.QRect(10, 290, 61, 16))
        self.txt_CNPJCPF_2.setObjectName("txt_CNPJCPF_2")
        self.txt_observacao = QtWidgets.QLabel(self.frameTab2)
        self.txt_observacao.setGeometry(QtCore.QRect(10, 10, 81, 16))
        self.txt_observacao.setObjectName("txt_observacao")
        self.lb_observacao = QtWidgets.QTextEdit(self.frameTab2)
        self.lb_observacao.setGeometry(QtCore.QRect(10, 30, 501, 241))
        self.lb_observacao.setFocusPolicy(QtCore.Qt.NoFocus)
        self.lb_observacao.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.lb_observacao.setObjectName("lb_observacao")
        self.bt_alterarDados = QtWidgets.QToolButton(self.tab_dadosAdicionais)
        self.bt_alterarDados.setGeometry(QtCore.QRect(320, 380, 121, 51))
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.bt_alterarDados.setFont(font)
        self.bt_alterarDados.setFocusPolicy(QtCore.Qt.NoFocus)
        self.bt_alterarDados.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.bt_alterarDados.setStyleSheet("")
        icon10 = QtGui.QIcon()
        icon10.addPixmap(QtGui.QPixmap("icons/iconAtualizar.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.bt_alterarDados.setIcon(icon10)
        self.bt_alterarDados.setIconSize(QtCore.QSize(40, 48))
        self.bt_alterarDados.setToolButtonStyle(QtCore.Qt.ToolButtonTextBesideIcon)
        self.bt_alterarDados.setObjectName("bt_alterarDados")
        self.tabWidget.addTab(self.tab_dadosAdicionais, "")
        self.bt_inutilizado1 = QtWidgets.QToolButton(formtransportador)
        self.bt_inutilizado1.setGeometry(QtCore.QRect(360, 0, 91, 81))
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.bt_inutilizado1.setFont(font)
        self.bt_inutilizado1.setFocusPolicy(QtCore.Qt.NoFocus)
        self.bt_inutilizado1.setStyleSheet("")
        self.bt_inutilizado1.setText("")
        icon11 = QtGui.QIcon()
        icon11.addPixmap(QtGui.QPixmap("../formNotaFiscal_completa/Icons/Icon_Interrogacao.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.bt_inutilizado1.setIcon(icon11)
        self.bt_inutilizado1.setIconSize(QtCore.QSize(80, 80))
        self.bt_inutilizado1.setToolButtonStyle(QtCore.Qt.ToolButtonTextUnderIcon)
        self.bt_inutilizado1.setObjectName("bt_inutilizado1")
        self.bt_inutilizado2 = QtWidgets.QToolButton(formtransportador)
        self.bt_inutilizado2.setGeometry(QtCore.QRect(450, 0, 91, 81))
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.bt_inutilizado2.setFont(font)
        self.bt_inutilizado2.setFocusPolicy(QtCore.Qt.NoFocus)
        self.bt_inutilizado2.setStyleSheet("")
        self.bt_inutilizado2.setText("")
        self.bt_inutilizado2.setIcon(icon11)
        self.bt_inutilizado2.setIconSize(QtCore.QSize(80, 80))
        self.bt_inutilizado2.setToolButtonStyle(QtCore.Qt.ToolButtonTextUnderIcon)
        self.bt_inutilizado2.setObjectName("bt_inutilizado2")
        self.bt_inutilizado3 = QtWidgets.QToolButton(formtransportador)
        self.bt_inutilizado3.setGeometry(QtCore.QRect(540, 0, 91, 81))
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.bt_inutilizado3.setFont(font)
        self.bt_inutilizado3.setFocusPolicy(QtCore.Qt.NoFocus)
        self.bt_inutilizado3.setStyleSheet("")
        self.bt_inutilizado3.setText("")
        self.bt_inutilizado3.setIcon(icon11)
        self.bt_inutilizado3.setIconSize(QtCore.QSize(80, 80))
        self.bt_inutilizado3.setToolButtonStyle(QtCore.Qt.ToolButtonTextUnderIcon)
        self.bt_inutilizado3.setObjectName("bt_inutilizado3")
        self.bt_inutilizado4 = QtWidgets.QToolButton(formtransportador)
        self.bt_inutilizado4.setGeometry(QtCore.QRect(630, 0, 91, 81))
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.bt_inutilizado4.setFont(font)
        self.bt_inutilizado4.setFocusPolicy(QtCore.Qt.NoFocus)
        self.bt_inutilizado4.setStyleSheet("")
        self.bt_inutilizado4.setText("")
        self.bt_inutilizado4.setIcon(icon11)
        self.bt_inutilizado4.setIconSize(QtCore.QSize(80, 80))
        self.bt_inutilizado4.setToolButtonStyle(QtCore.Qt.ToolButtonTextUnderIcon)
        self.bt_inutilizado4.setObjectName("bt_inutilizado4")

        self.retranslateUi(formtransportador)
        self.tabWidget.setCurrentIndex(0)
        self.bt_cancelar.clicked.connect(self.frameDadostransportador.hide) # type: ignore
        self.bt_incluir.clicked.connect(self.frameDadostransportador.show) # type: ignore
        self.bt_confirmar.clicked.connect(self.frameDadostransportador.hide) # type: ignore
        self.bt_consultar.clicked.connect(self.frameDadostransportador.show) # type: ignore
        self.bt_sair.clicked.connect(formtransportador.close) # type: ignore
        self.bt_alterar.clicked.connect(self.frameDadostransportador.show) # type: ignore
        self.bt_incluir.clicked.connect(self.bt_alterarDados.hide) # type: ignore
        self.bt_alterar.clicked.connect(self.bt_confirmar.hide) # type: ignore
        self.bt_alterar.clicked.connect(self.bt_alterarDados.show) # type: ignore
        self.bt_incluir.clicked.connect(self.bt_confirmar.show) # type: ignore
        self.bt_consultar.clicked.connect(self.bt_confirmar.hide) # type: ignore
        self.bt_consultar.clicked.connect(self.bt_alterarDados.hide) # type: ignore
        self.bt_alterarDados.clicked.connect(self.frameDadostransportador.hide) # type: ignore
        QtCore.QMetaObject.connectSlotsByName(formtransportador)
        formtransportador.setTabOrder(self.lb_razaoSocial, self.lb_class)
        formtransportador.setTabOrder(self.lb_class, self.lb_nomeFantasia)
        formtransportador.setTabOrder(self.lb_nomeFantasia, self.lb_cnpjcpf)
        formtransportador.setTabOrder(self.lb_cnpjcpf, self.lb_ierg)
        formtransportador.setTabOrder(self.lb_ierg, self.lb_endereco)
        formtransportador.setTabOrder(self.lb_endereco, self.lb_numero)
        formtransportador.setTabOrder(self.lb_numero, self.lb_bairro)
        formtransportador.setTabOrder(self.lb_bairro, self.lb_cidade)
        formtransportador.setTabOrder(self.lb_cidade, self.lb_cep)
        formtransportador.setTabOrder(self.lb_cep, self.lb_uf)
        formtransportador.setTabOrder(self.lb_uf, self.lb_telefone)
        formtransportador.setTabOrder(self.lb_telefone, self.lb_email)

    def retranslateUi(self, formtransportador):
        _translate = QtCore.QCoreApplication.translate
        formtransportador.setWindowTitle(_translate("formtransportador", "transportador"))
        self.txt_nometransportador.setText(_translate("formtransportador", "Nome transportador:"))
        self.bt_sair.setText(_translate("formtransportador", "Sair"))
        self.bt_incluir.setText(_translate("formtransportador", "Incluir"))
        item = self.tb_transportador.horizontalHeaderItem(1)
        item.setText(_translate("formtransportador", "Razão Social"))
        item = self.tb_transportador.horizontalHeaderItem(2)
        item.setText(_translate("formtransportador", "Nome Fantasia"))
        item = self.tb_transportador.horizontalHeaderItem(3)
        item.setText(_translate("formtransportador", "Classificação"))
        item = self.tb_transportador.horizontalHeaderItem(4)
        item.setText(_translate("formtransportador", "CNPJ/CPF"))
        item = self.tb_transportador.horizontalHeaderItem(5)
        item.setText(_translate("formtransportador", "I.E/RG"))
        item = self.tb_transportador.horizontalHeaderItem(6)
        item.setText(_translate("formtransportador", "Endereço"))
        item = self.tb_transportador.horizontalHeaderItem(7)
        item.setText(_translate("formtransportador", "Número"))
        item = self.tb_transportador.horizontalHeaderItem(8)
        item.setText(_translate("formtransportador", "Bairro"))
        item = self.tb_transportador.horizontalHeaderItem(9)
        item.setText(_translate("formtransportador", "CEP"))
        item = self.tb_transportador.horizontalHeaderItem(10)
        item.setText(_translate("formtransportador", "Cidade"))
        item = self.tb_transportador.horizontalHeaderItem(11)
        item.setText(_translate("formtransportador", "Estado"))
        item = self.tb_transportador.horizontalHeaderItem(12)
        item.setText(_translate("formtransportador", "Telefone"))
        item = self.tb_transportador.horizontalHeaderItem(13)
        item.setText(_translate("formtransportador", "email"))
        item = self.tb_transportador.horizontalHeaderItem(14)
        item.setText(_translate("formtransportador", "Observação"))
        item = self.tb_transportador.horizontalHeaderItem(15)
        item.setText(_translate("formtransportador", "Prazo"))
        item = self.tb_transportador.horizontalHeaderItem(16)
        item.setText(_translate("formtransportador", "Usuário"))
        item = self.tb_transportador.horizontalHeaderItem(17)
        item.setText(_translate("formtransportador", "Auditoria"))
        self.bt_alterar.setText(_translate("formtransportador", "Alterar"))
        self.bt_consultar.setText(_translate("formtransportador", "Consultar"))
        self.bt_excluir.setText(_translate("formtransportador", "Excluir"))
        self.bt_cancelar.setText(_translate("formtransportador", "Cancelar"))
        self.bt_avancar.setText(_translate("formtransportador", "Avançar"))
        self.txt_email.setText(_translate("formtransportador", "E-mail"))
        self.txt_cep.setText(_translate("formtransportador", "CEP"))
        self.txt_telefones.setText(_translate("formtransportador", "Telefones:"))
        self.txt_razaoSocial.setText(_translate("formtransportador", "Razão Social"))
        self.txt_IERG.setText(_translate("formtransportador", "I.E/RG"))
        self.txt_cidade.setText(_translate("formtransportador", "Cidade"))
        self.txt_numero.setText(_translate("formtransportador", "Número"))
        self.txt_endereco.setText(_translate("formtransportador", "Endereço"))
        self.txt_CNPJCPF.setText(_translate("formtransportador", "CNPJ/CPF"))
        self.txt_class.setText(_translate("formtransportador", "Class"))
        self.txt_bairro.setText(_translate("formtransportador", "Bairro"))
        self.txt_nomeFantasia.setText(_translate("formtransportador", "Nome Fantasia"))
        self.txt_UF.setText(_translate("formtransportador", "UF"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab_transportador), _translate("formtransportador", "transportador"))
        self.bt_confirmar.setText(_translate("formtransportador", "Confirmar"))
        self.bt_retornar.setText(_translate("formtransportador", "Retornar"))
        self.txt_CNPJCPF_2.setText(_translate("formtransportador", "Prazo:"))
        self.txt_observacao.setText(_translate("formtransportador", "Observação"))
        self.bt_alterarDados.setText(_translate("formtransportador", "Confirmar"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab_dadosAdicionais), _translate("formtransportador", "Dados adicionais"))
        # Todo: começa aqui a mexer


        self.frameDadostransportador.hide()

        self.bt_pesquisarGeral.clicked.connect(self.consultarGeral)  # Todo: pesquisa Geral
        self.bt_pesquisar.clicked.connect(self.consultarNomes)  # Todo: consulta por nome
        self.bt_confirmar.clicked.connect(self.cadastrartransportador)  # Todo: Cadastra transportador no banco de dados.
        self.bt_consultar.clicked.connect(self.consultartransportador)  # Todo: consulta o forncecedor.
        self.bt_alterar.clicked.connect(self.abrirDadostransportadors)  # Todo: carrega os dados dos transportadors na tela.
        self.bt_alterarDados.clicked.connect(self.alterarDadostransportador) #Todo: faz a alteração dos dados transportadores.
        self.bt_excluir.clicked.connect(self.excluirtransportador)  # Todo: exclui o transportador.
        self.consultarGeral()  # Todo carrega a tabela.
        self.tb_transportador.selectRow(0)  # Todo: aqui pega-se a primeira linha da tabela.
        self.bt_retornar.clicked.connect(self.retornarPagTab)  # Todo: Retorna a pagina 0
        self.bt_avancar.clicked.connect(self.avancaPagTab)  # Todo: vai para a página 1
        self.bt_incluir.clicked.connect(self.incluirtransportador)  # Todo: abrr a tela incluir transportador
        self.bt_cancelar.clicked.connect(self.cancelar)


    def consultarGeral(self):



        try:
            mydb = mysql.connector.connect(
                host=host,
                user=user,
                password=password,
                database=database

            )
            mycursor = mydb.cursor()
            sql = "SELECT * FROM transportador ORDER BY razaoSocial"
            mycursor.execute(sql)
            myresult = mycursor.fetchall()

            df_transportador = pd.DataFrame(myresult,
                                      columns=['ID transportador', 'RAZÃO SOCIAL', 'NOME FANTASIA', 'CLASSIFICAÇÃO', 'CNPJ CPF',
                                               'IE RG', 'ENDEREÇO', 'NÚMERO', 'BAIRRO', 'CEP', 'CIDADE', 'ESTADO',
                                               'TELEFONE', 'E-MAIL', 'OBERSERVAÇÃO', 'PRAZO', 'USUÁRIO DE CADASTRO',
                                               'AUDITORIA'])
            self.all_data = df_transportador
            # Todo: Carrega o arquivo na Tabela transportador
            numRows = len(self.all_data.index)
            self.tb_transportador.setColumnCount(len(self.all_data.columns))
            self.tb_transportador.setRowCount(numRows)
            #self.tb_transportador.setHorizontalHeaderLabels(self.all_data.columns) #Todo:Setar o título e cabeçalho da tabela

            for i in range(numRows):
                for j in range(len(self.all_data.columns)):
                    self.tb_transportador.setItem(i, j, QTableWidgetItem(str(self.all_data.iat[i, j])))

            self.tb_transportador.resizeColumnsToContents()
            self.tb_transportador.resizeRowsToContents()

            mycursor.close()






        except:
            self.all_data = 0
            msg = QMessageBox()
            msg.setIcon(QMessageBox.warning)
            msg.setText("Error")
            msg.setInformativeText("Não foi possível consultar a tabela!")
            msg.setWindowTitle("Error")
            msg.exec_()
            pass

    def consultarNomes(self):
        print('Consultar por nome')
        procurarNome = self.lb_nometransportador.text()

        try:
            mydb = mysql.connector.connect(
                host=host,
                user=user,
                password=password,
                database=database

            )
            mycursor = mydb.cursor()
            sql = f"SELECT * FROM transportador WHERE razaoSocial LIKE '{procurarNome}%' ORDER BY razaoSocial"
            mycursor.execute(sql)
            myresult = mycursor.fetchall()
            print(myresult)
            df_transportador = pd.DataFrame(myresult,
                                      columns=['ID transportador', 'RAZÃO SOCIAL', 'NOME FANTASIA', 'CLASSIFICAÇÃO', 'CNPJ CPF',
                                               'IE RG', 'ENDEREÇO', 'NÚMERO', 'BAIRRO', 'CEP', 'CIDADE', 'ESTADO',
                                               'TELEFONE', 'E-MAIL', 'OBERSERVAÇÃO', 'PRAZO', 'USUÁRIO DE CADASTRO',
                                               'AUDITORIA'])
            self.all_data = df_transportador
            # Todo: Carrega o arquivo na Tabela transportador
            numRows = len(self.all_data.index)
            self.tb_transportador.setColumnCount(len(self.all_data.columns))
            self.tb_transportador.setRowCount(numRows)
            # self.tb_transportador.setHorizontalHeaderLabels(self.all_data.columns) #Setar o título e cabeçalho da tabela

            for i in range(numRows):
                for j in range(len(self.all_data.columns)):
                    self.tb_transportador.setItem(i, j, QTableWidgetItem(str(self.all_data.iat[i, j])))

            self.tb_transportador.resizeColumnsToContents()
            self.tb_transportador.resizeRowsToContents()

            mycursor.close()

        except:
            self.all_data = 0
            msg = QMessageBox()
            msg.setIcon(QMessageBox.warning)
            msg.setText("Error")
            msg.setInformativeText("Não foi possível consultar a tabela!")
            msg.setWindowTitle("Error")
            msg.exec()
            pass

    def cadastrartransportador(self):
        self.consultarGeral()
        self.lb_observacao.cursor()  # Todo: serve para liberar o cursor da tela.
        self.frameTab1.setEnabled(True)
        self.frameTab2.setEnabled(True)
        self.tabWidget.setCurrentIndex(0)


        # Todo: seta labels das variaveis.
        razaoSocial = self.lb_razaoSocial.text()  # 1
        nomeFantasia = self.lb_nomeFantasia.text()  # 2
        classificacao = self.lb_class.text()  # 3
        cnpjcpf = self.lb_cnpjcpf.text()  # 4
        ierg = self.lb_ierg.text()  # 5
        endereco = self.lb_endereco.text()  # 6
        numero = self.lb_numero.text()  # 7
        bairro = self.lb_bairro.text()  # 8
        cidade = self.lb_cidade.text()  # 9
        cep = self.lb_cep.text()  # 10
        estado = self.lb_uf.text()  # 11
        telefone = self.lb_telefone.text()  # 12
        email = self.lb_email.text()  # 13
        observacao = self.lb_observacao.toPlainText()  # 14
        prazo = self.lb_prazo.text()  # 15
        usuarioCadastro = 1  # 16
        dataHoje = datetime.today().strftime('%H:%M:%S - %d-%m-%Y')
        serialUniqPC = subprocess.check_output('wmic bios get serialnumber').decode("utf-8")
        auditoria = "Hora Exata:" + str(dataHoje) + ' Máquina: ' + str(
            serialUniqPC[36:49] + ' Usuário: ' + str(usuarioCadastro))  # 17

        print(dataHoje)
        print('cadastrado com sucesso')

        # todo: testando as captações

        print(razaoSocial)
        print(nomeFantasia)
        print(classificacao)
        print(cnpjcpf)
        print(ierg)
        print(endereco)
        print(numero)
        print(bairro)
        print(cidade)
        print(cep)
        print(estado)
        print(telefone)
        print(email)
        print(observacao)
        print(prazo)
        print(auditoria)

        # Todo: fazer uma checagem se esta tudo vazio com a finalidade de não haver erros

        if razaoSocial == '':
            razaoSocial = None
        if nomeFantasia == '':
            nomeFantasia = None
        if classificacao == '':
            classificacao = None
        if cnpjcpf == '':
            cnpjcpf = None
        if ierg == '':
            ierg = None
        if endereco == '':
            endereco = None
        if numero == '':
            numero = None
        if bairro == '':
            bairro = None
        if cidade == '':
            cidade = None
        if cep == '':
            cep = None
        if estado == '':
            estado = None
        if telefone == '':
            telefone = None
        if email == '':
            email = None
        if observacao == '':
            observacao = None
        if prazo == '':
            prazo = None

        try:
            mydb = mysql.connector.connect(
                host=host,
                user=user,
                password=password,
                database=database

            )
            mycursor = mydb.cursor()
            sql = "INSERT INTO transportador (razaoSocial, nomeFantasia, classificacao, cnpjcpf, ierg, endereco, numero, bairro, cidade, cep,  estado, telefone, email, observacao, prazo, usuarioCadastro, auditoria) VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)"
            val = (
                razaoSocial, nomeFantasia, classificacao, cnpjcpf, ierg, endereco, numero, bairro, cidade, cep, estado,
                telefone, email, observacao, prazo, usuarioCadastro, auditoria)
            mycursor.execute(sql, val)
            mydb.commit()
            # M commit o banco de dados
            myresult = mycursor.fetchall()
            mydb.commit()

            self.lb_razaoSocial.clear()
            self.lb_nomeFantasia.clear()
            self.lb_class.clear()
            self.lb_cnpjcpf.clear()
            self.lb_ierg.clear()
            self.lb_endereco.clear()
            self.lb_numero.clear()
            self.lb_bairro.clear()
            self.lb_cidade.clear()
            self.lb_cep.clear()
            self.lb_uf.clear()
            self.lb_telefone.clear()
            self.lb_email.clear()
            self.lb_observacao.clear()
            self.lb_prazo.clear()
            self.tabWidget.setCurrentIndex(0)  # Todo: volta página 0

            msg = QMessageBox()
            msg.setIcon(QMessageBox.Information)
            msg.setWindowTitle("Adição")
            msg.setText(f" Adicionado com sucesso!")
            msg.setStyleSheet("color: rgb(0, 170, 0)")
            msg.exec_()
            self.consultarGeral()
            self.bt_alterar.setEnabled(True)
            self.bt_consultar.setEnabled(True)








        except:
            print('')
            msg = QMessageBox()
            msg.setIcon(QMessageBox.critical)
            msg.setText("Erro SQL")
            msg.setInformativeText('Favor contactar o administrador do sistema!')
            msg.setWindowTitle('Erro')
            msg.exec_()

            mycursor.close()
            mydb.close()

    def consultartransportador(self):
        self.bt_alterar.setEnabled(False)
        self.bt_incluir.setEnabled(False)
        #self.formatoConsulta()
        print('Consultar')
        linha = self.tb_transportador.currentRow()
        item = self.tb_transportador.item(linha, 0)
        variaveisDeControles.idConsulta = item.text()
        print(variaveisDeControles.idConsulta)

        mydb = mysql.connector.connect(
            host=host,
            user=user,
            password=password,
            database=database

        )
        mycursor = mydb.cursor()
        consultaConsulta = f'SELECT * FROM transportador WHERE idtransportador= "{variaveisDeControles.idConsulta}"'

        mycursor.execute(consultaConsulta)
        myresult = mycursor.fetchall()
        print(f'{myresult}')
        mycursor.close()
        df_transportador = pd.DataFrame(myresult,
                                  columns=['idtransportador', 'razaoSocial', 'nomeFantasia', 'classificacao', 'cnpjcpf',
                                           'ierg', 'endereco', 'numero', 'bairro', 'cep', 'cidade', 'estado',
                                           'telefone', 'email', 'observacao', 'prazo', 'usuarioCadastro',
                                           'auditoria'])

        self.lb_razaoSocial.setText(df_transportador.loc[0][1])
        self.lb_nomeFantasia.setText(df_transportador.loc[0][2])
        self.lb_class.setText(df_transportador.loc[0][3])
        self.lb_cnpjcpf.setText(df_transportador.loc[0][4])
        self.lb_ierg.setText(df_transportador.loc[0][5])
        self.lb_endereco.setText(df_transportador.loc[0][6])
        self.lb_numero.setText((str(df_transportador.loc[0][7])))
        self.lb_bairro.setText(df_transportador.loc[0][8])
        self.lb_cep.setText(df_transportador.loc[0][9])
        self.lb_uf.setText(df_transportador.loc[0][10])
        self.lb_cidade.setText(df_transportador.loc[0][11])
        self.lb_telefone.setText(df_transportador.loc[0][12])
        self.lb_email.setText(df_transportador.loc[0][13])
        self.lb_observacao.insertPlainText(df_transportador.loc[0][14])
        self.lb_prazo.setText(df_transportador.loc[0][15])
        self.frameTab1.setEnabled(False)
        self.frameTab2.setEnabled(False)

    def abrirDadostransportadors(self):
        self.bt_consultar.setEnabled(False)
        self.bt_incluir.setEnabled(False)
        self.limpaTela()
        self.consultarGeral()
        self.formatoAlterar()
        print('mostrando Dados...')

        linha = self.tb_transportador.currentRow()
        item = self.tb_transportador.item(linha,0)
        variaveisDeControles.idConsulta = item.text()
        print(variaveisDeControles.idConsulta)
        mydb = mysql.connector.connect(
            host = host,
            user = user,
            password =password,
            database = database

        )

        mycursor = mydb.cursor()

        sql = f"SELECT * FROM transportador WHERE idtransportador = '{variaveisDeControles.idConsulta}'"
        mycursor.execute(sql)

        myresult = mycursor.fetchall()
        print(myresult, sql)

        mycursor.close()

        df_transportador = pd.DataFrame(myresult,columns=['idtransportador', 'razaoSocial', 'nomeFantasia', 'classificacao', 'cnpjcpf',
                                           'ierg', 'endereco', 'numero', 'bairro', 'cep', 'cidade', 'estado',
                                           'telefone', 'email', 'observacao', 'prazo', 'usuarioCadastro',
                                           'auditoria'])

        self.lb_razaoSocial.setText(df_transportador.loc[0][1])
        self.lb_nomeFantasia.setText(df_transportador.loc[0][2])
        self.lb_class.setText(df_transportador.loc[0][3])
        self.lb_cnpjcpf.setText(df_transportador.loc[0][4])
        self.lb_ierg.setText(df_transportador.loc[0][5])
        self.lb_endereco.setText(df_transportador.loc[0][6])
        self.lb_numero.setText((str(df_transportador.loc[0][7])))
        self.lb_bairro.setText(df_transportador.loc[0][8])
        self.lb_cep.setText(df_transportador.loc[0][9])
        self.lb_uf.setText(df_transportador.loc[0][10])
        self.lb_cidade.setText(df_transportador.loc[0][11])
        self.lb_telefone.setText(df_transportador.loc[0][12])
        self.lb_email.setText(df_transportador.loc[0][13])
        self.lb_observacao.insertPlainText(df_transportador.loc[0][14])
        self.lb_prazo.setText(df_transportador.loc[0][15])

    def alterarDadostransportador(self):


        if self.tb_transportador.rowCount() > 1:



            print('Alterando')
            linha = self.tb_transportador.currentRow()
            idtransportadorLinha = self.tb_transportador.item(linha, 0).text()
            print(f"Linha: {linha}, ID transportador: {idtransportadorLinha}")
            # Todo: seta labels das variaveis.
            razaoSocial = self.lb_razaoSocial.text()  # 1
            nomeFantasia = self.lb_nomeFantasia.text()  # 2
            classificacao = self.lb_class.text()  # 3
            cnpjcpf = self.lb_cnpjcpf.text()  # 4
            ierg = self.lb_ierg.text()  # 5
            endereco = self.lb_endereco.text()  # 6
            numero = self.lb_numero.text() # 7
            bairro = self.lb_bairro.text()  # 8
            cidade = self.lb_cidade.text()  # 9
            cep = self.lb_cep.text()  # 10
            estado = self.lb_uf.text()  # 11
            telefone = self.lb_telefone.text()  # 12
            email = self.lb_email.text()  # 13
            observacao = self.lb_observacao.toPlainText()  # 14
            prazo = self.lb_prazo.text()  # 15
            usuarioCadastro = 1  # 16
            dataHoje = datetime.today().strftime('%H:%M:%S - %d-%m-%Y')
            serialUniqPC = subprocess.check_output('wmic bios get serialnumber').decode("utf-8")
            auditoria = "Hora Exata:" + str(dataHoje) + ' Máquina: ' + str(
                serialUniqPC[36:49] + ' Usuário: ' + str(usuarioCadastro))  # 17

            print(dataHoje)
            print('Alterado com sucesso')

            # todo: testando as captações

            print(razaoSocial)
            print(nomeFantasia)
            print(classificacao)
            print(cnpjcpf)
            print(ierg)
            print(endereco)
            print(numero)
            print(bairro)
            print(cidade)
            print(cep)
            print(estado)
            print(telefone)
            print(email)
            print(observacao)
            print(prazo)
            print(auditoria)

            # Todo: fazer uma checagem se esta tudo vazio com a finalidade de não haver erros



            if razaoSocial == '':
                razaoaSocial = None
            if nomeFantasia == '':
                nomeFantasia = None
            if classificacao == '':
                classificacao = None
            if cnpjcpf == '':
                cnpjcpf = None
            if ierg == '':
                ierg = None
            if endereco == '':
                endereco = None
            if numero == '':
                numero = None
            if bairro == '':
                bairro = None
            if cidade == '':
                cidade = None
            if cep == '':
                cep = None
            if estado == '':
                estado = None
            if telefone == '':
                telefone = None
            if email == '':
                email = None
            if observacao == '':
                observacao = None
            if prazo == '':
                prazo = None

            try:
                mydb = mysql.connector.connect(
                    host=host,
                    user=user,
                    password=password,
                    database=database

                )
                mycursor = mydb.cursor()

                sql = f"UPDATE transportador SET razaoSocial = '{razaoSocial}', nomeFantasia = '{nomeFantasia}', classificacao = '{classificacao}', cnpjcpf = '{cnpjcpf}', ierg = '{ierg}', endereco = '{endereco}', numero = '{numero}', bairro = '{bairro}', cep = '{cep}', cidade = '{cidade}', estado = '{estado}', telefone = '{telefone}', email = '{email}', observacao = '{observacao}', prazo = '{prazo}' WHERE idtransportador = '{idtransportadorLinha}'"

                mycursor.execute(sql)
                mydb.commit()
                self.lb_razaoSocial.clear()
                self.lb_nomeFantasia.clear()
                self.lb_class.clear()
                self.lb_cnpjcpf.clear()
                self.lb_ierg.clear()
                self.lb_endereco.clear()
                self.lb_numero.clear()
                self.lb_bairro.clear()
                self.lb_cidade.clear()
                self.lb_cep.clear()
                self.lb_uf.clear()
                self.lb_telefone.clear()
                self.lb_email.clear()
                self.lb_observacao.clear()
                self.lb_prazo.clear()

                mydb.close()
                msg = QMessageBox()
                msg.setIcon(QMessageBox.Information)
                msg.setWindowTitle('alteração')
                msg.setText(f'ID: {idtransportadorLinha} alterado com sucesso')
                msg.exec()
                self.consultarGeral()
                #self.limpaTela()
                self.tabWidget.setCurrentIndex(0)  # Todo: volta página
                self.bt_incluir.setEnabled(True)
                self.bt_consultar.setEnabled(True)





                print(f'\033[0;34m{idtransportadorLinha}\033[m')
                print('Id de alteração: ', idtransportadorLinha)
            except:
                print('')
                msg = QMessageBox()
                msg.setIcon(QMessageBox.Critical)
                msg.setText('Erro SQL')
                msg.setInformativeText('Favor contactar o Administrador do sistema')
                msg.setWindowTitle('Erro')
                msg.exec_()
        else:
            self.consultarGeral()


    def excluirtransportador(self):

        if self.tb_transportador.rowCount()>1:





            print('Excluindo transportador....')
            msg = QMessageBox()
            msg.setWindowTitle("Aviso")
            msg.setText("Deseja realmente Excluir os dados")
            msg.setStandardButtons(QMessageBox.StandardButton.Yes | QMessageBox.StandardButton.No)
            ret = msg.exec()

            if ret == QMessageBox.StandardButton.Yes:
                linha = self.tb_transportador.currentRow()
                idtransportadorLinha = self.tb_transportador.item(linha, 0).text()

                try:

                    mydb = mysql.connector.connect(
                        host=host,
                        user=user,
                        password=password,
                        database=database

                    )
                    mycursor = mydb.cursor()
                    sql = f"DELETE From transportador WHERE idtransportador = '{idtransportadorLinha}'"
                    mycursor.execute(sql)
                    mydb.commit()
                    #print(mycursor.rowcount, "Excluído com sucesso")
                    msg = QMessageBox()
                    msg.setIcon(QMessageBox.Information)
                    msg.setWindowTitle("Aviso")
                    msg.setText(f"transportador {idtransportadorLinha} Excluido com sucesso")
                    msg.exec_()
                    self.consultarGeral()


                except:

                    self.all_data = 0
                    print('tente depois')
                    msg = QMessageBox()
                    msg.setWindowTitle("Aviso")
                    msg.setText('Não foi possível fazer a exclusão')
                    msg.exec_()

                msg.setStandardButtons(QMessageBox.StandardButton.Ok)
                ret = msg.exec()
            else:
                print()
                #msg = QMessageBox()
                #msg.setWindowTitle("Aviso")
                #msg.setText("transportador não excluido")
                #msg.setStandardButtons(QMessageBox.StandardButton.Ok)
                #ret = msg.exec()

            try:
                mydb = mysql.connector.connect(
                    host=host,
                    user=user,
                    password=password,
                    database=database

                )
                mycursor = mydb.cursor()
                sql = "SELECT * FROM transportador"
                mycursor.execute(sql)
                myresult = mycursor.fetchall()

            except:
                self.all_data = 0
                msg = QMessageBox()
                msg.setIcon(QMessageBox.warning)
                msg.setText("Error")
                msg.setInformativeText("Não foi possível consultar a tabela!")
                msg.setWindowTitle("Error")
                msg.exec_()
                pass
        else:
            msg = QMessageBox()
            msg.setIcon(QMessageBox.Information)
            msg.setText("TABELA VAZIA")
            msg.setInformativeText("Carregaremos a tabela antes.")
            msg.setWindowTitle("Error")
            msg.exec_()
            pass
            self.consultarGeral()


    def retornarPagTab(self):
        self.tabWidget.setCurrentIndex(0)

    def avancaPagTab(self):
        self.tabWidget.setCurrentIndex(1)

    def incluirtransportador(self):
        self.limpaTela()

        self.frameTab1.setEnabled(True)
        self.frameTab2.setEnabled(True)
        self.bt_consultar.setEnabled(False) #Todo: Gravei os botões para não dar erro.
        self.bt_alterar.setEnabled(False) #Todo: Gravei os botões para não dar erro.
        self.formatoCadastro()
        self.lb_observacao.cursor()
        self.lb_observacao.setPlaceholderText('Digite alguma observação')
        self.lb_observacao.setEnabled(True)


    def incluirtransportador(self):
        self.limpaTela()

        self.frameTab1.setEnabled(True)
        self.frameTab2.setEnabled(True)
        self.bt_consultar.setEnabled(False) #Todo: Gravei os botões para não dar erro.
        self.bt_alterar.setEnabled(False) #Todo: Gravei os botões para não dar erro.
        self.formatoCadastro()
        self.lb_observacao.cursor()
        self.lb_observacao.setPlaceholderText('Digite alguma observação')
        self.lb_observacao.setEnabled(True)

    def cancelar(self):
        self.bt_incluir.setEnabled(True)
        self.bt_consultar.setEnabled(True)
        self.bt_alterar.setEnabled(True)
        self.lb_observacao.cursor()
        self.lb_observacao.setEnabled(True)

    def formatoCadastro(self):



        self.lb_razaoSocial.setStyleSheet('background-color: rgb(255, 255, 255); color: rgb(0, 170, 0); font: 10pt "Verdana";')
        self.txt_razaoSocial.setStyleSheet('font: 87 10pt "Arial";')


        self.lb_nomeFantasia.setStyleSheet('background-color: rgb(255, 255, 255); color: rgb(0, 170, 0); font: 10pt "Verdana";')
        self.txt_nomeFantasia.setStyleSheet('font: 87 10pt "Arial";')

        self.lb_class.setStyleSheet('background-color: rgb(255, 255, 255); color: rgb(0, 170, 0); font: 10pt "Verdana";')
        self.txt_class.setStyleSheet('font: 87 10pt "Arial";')

        self.lb_cnpjcpf.setStyleSheet('background-color: rgb(255, 255, 255); color: rgb(0, 170, 0); font: 10pt "Verdana";')
        self.txt_CNPJCPF.setStyleSheet('font: 87 10pt "Arial";')

        self.lb_ierg.setStyleSheet('background-color: rgb(255, 255, 255); color: rgb(0, 170, 0); font: 10pt "Verdana";')
        self.txt_IERG.setStyleSheet('font: 87 10pt "Arial";')

        self.lb_endereco.setStyleSheet('background-color: rgb(255, 255, 255); color: rgb(0, 170, 0); font: 10pt "Verdana";')
        self.txt_endereco.setStyleSheet('font: 87 10pt "Arial";')

        self.lb_numero.setStyleSheet('background-color: rgb(255, 255, 255); color: rgb(0, 170, 0); font: 10pt "Verdana";')
        self.txt_numero.setStyleSheet('font: 87 10pt "Arial";')

        self.lb_bairro.setStyleSheet('background-color: rgb(255, 255, 255); color: rgb(0, 170, 0); font: 10pt "Verdana";')
        self.txt_bairro.setStyleSheet('font: 87 10pt "Arial";')

        self.lb_cep.setStyleSheet('background-color: rgb(255, 255, 255); color: rgb(0, 170, 0); font: 10pt "Verdana";')
        self.txt_cep.setStyleSheet('font: 87 10pt "Arial";')

        self.lb_uf.setStyleSheet('background-color: rgb(255, 255, 255); color: rgb(0, 170, 0); font: 10pt "Verdana";')
        self.txt_UF.setStyleSheet('font: 87 10pt "Arial";')

        self.lb_cidade.setStyleSheet('background-color: rgb(255, 255, 255); color: rgb(0, 170, 0); font: 10pt "Verdana";')
        self.txt_cidade.setStyleSheet('font: 87 10pt "Arial";')

        self.lb_telefone.setStyleSheet('background-color: rgb(255, 255, 255); color: rgb(0, 170, 0); font: 10pt "Verdana";')
        self.txt_telefones.setStyleSheet('font: 87 10pt "Arial";')

        self.lb_email.setStyleSheet('background-color: rgb(255, 255, 255); color: rgb(0, 170, 0); font: 10pt "Verdana";')
        self.txt_email.setStyleSheet('font: 87 10pt "Arial";')

        self.lb_observacao.setStyleSheet('background-color: rgb(255, 255, 255); color: rgb(0, 170, 0); font: 10pt "Verdana";')
        self.txt_observacao.setStyleSheet('font: 87 10pt "Arial";')

        self.lb_prazo.setStyleSheet('background-color: rgb(255, 255, 255); color: rgb(0, 170, 0); font: 10pt "Verdana";')
        self.txt_CNPJCPF_2.setStyleSheet('font: 87 10pt "Arial";')

    def formatoConsulta(self):
        # Todo Trocar cor das letras das Labels
        self.limpaTela()


        self.lb_razaoSocial.setStyleSheet('color: rgb(85, 170, 255); font: 63 10pt "Lucida Sans";')
        self.lb_nomeFantasia.setStyleSheet('color: rgb(85, 170, 255); font: 63 10pt "Lucida Sans";')
        self.lb_class.setStyleSheet('color: rgb(85, 170, 255); font: 63 10pt "Lucida Sans";')
        self.lb_cnpjcpf.setStyleSheet('color: rgb(85, 170, 255); font: 63 10pt "Lucida Sans";')
        self.lb_ierg.setStyleSheet('color: rgb(85, 170, 255); font: 63 10pt "Lucida Sans";')
        self.lb_endereco.setStyleSheet('color: rgb(85, 170, 255); font: 63 10pt "Lucida Sans";')
        self.lb_numero.setStyleSheet('color: rgb(85, 170, 255); font: 63 10pt "Lucida Sans";')
        self.lb_bairro.setStyleSheet('color: rgb(85, 170, 255); font: 63 10pt "Lucida Sans";')
        self.lb_cep.setStyleSheet('color: rgb(85, 170, 255); font: 63 10pt "Lucida Sans";')
        self.lb_uf.setStyleSheet('color: rgb(85, 170, 255); font: 63 10pt "Lucida Sans";')
        self.lb_cidade.setStyleSheet('color: rgb(85, 170, 255); font: 63 10pt "Lucida Sans";')
        self.lb_telefone.setStyleSheet('color: rgb(85, 170, 255); font: 63 10pt "Lucida Sans";')
        self.lb_email.setStyleSheet('color: rgb(85, 170, 255); font: 63 10pt "Lucida Sans";')
        self.lb_observacao.setStyleSheet('color: rgb(85, 170, 255); font: 63 10pt "Lucida Sans";')
        self.lb_prazo.setStyleSheet('color: rgb(85, 170, 255); font: 63 10pt "Lucida Sans";')



    def formatoAlterar(self):
        self.lb_razaoSocial.setStyleSheet('color: rgb(85, 0, 255); font: 63 10pt "Lucida Sans";')
        self.lb_nomeFantasia.setStyleSheet('color: rgb(85, 0, 255); font: 63 10pt "Lucida Sans";')
        self.lb_class.setStyleSheet('color: rgb(85, 0, 255); font: 63 10pt "Lucida Sans";')
        self.lb_cnpjcpf.setStyleSheet('color: rgb(85, 0, 255); font: 63 10pt "Lucida Sans";')
        self.lb_ierg.setStyleSheet('color: rgb(85, 0, 255); font: 63 10pt "Lucida Sans";')
        self.lb_endereco.setStyleSheet('color: rgb(85, 0, 255); font: 63 10pt "Lucida Sans";')
        self.lb_numero.setStyleSheet('color: rgb(85, 0, 255); font: 63 10pt "Lucida Sans";')
        self.lb_bairro.setStyleSheet('color: rgb(85, 0, 255); font: 63 10pt "Lucida Sans";')
        self.lb_cep.setStyleSheet('color: rgb(85, 0, 255); font: 63 10pt "Lucida Sans";')
        self.lb_uf.setStyleSheet('color: rgb(85, 0, 255); font: 63 10pt "Lucida Sans";')
        self.lb_cidade.setStyleSheet('color: rgb(85, 0, 255); font: 63 10pt "Lucida Sans";')
        self.lb_telefone.setStyleSheet('color: rgb(85, 0, 255); font: 63 10pt "Lucida Sans";')
        self.lb_email.setStyleSheet('color: rgb(85, 0, 255); font: 63 10pt "Lucida Sans";')
        self.lb_observacao.setStyleSheet('color: rgb(85, 0, 255); font: 63 10pt "Lucida Sans";')
        self.lb_prazo.setStyleSheet('color: rgb(85, 0, 255); font: 63 10pt "Lucida Sans";')


    def limpaTela(self):
        self.frameTab1.setEnabled(True)
        self.frameTab2.setEnabled(True)
        self.lb_razaoSocial.clear()
        self.lb_nomeFantasia.clear()
        self.lb_class.clear()
        self.lb_cnpjcpf.clear()
        self.lb_ierg.clear()
        self.lb_endereco.clear()
        self.lb_numero.clear()
        self.lb_bairro.clear()
        self.lb_cidade.clear()
        self.lb_cep.clear()
        self.lb_uf.clear()
        self.lb_telefone.clear()
        self.lb_email.clear()
        self.lb_observacao.clear()
        self.lb_prazo.clear()





if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    formtransportador = QtWidgets.QWidget()
    ui = Ui_formtransportador()
    ui.setupUi(formtransportador)
    formtransportador.show()
    sys.exit(app.exec_())
